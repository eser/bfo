name: development

services:
  api:
    tty: true
    stdin_open: true
    restart: unless-stopped
    build:
      context: ../../
      dockerfile: ./ops/docker/Dockerfile
      target: runner-development
    develop:
      watch:
        - action: sync+restart
          path: ../
          target: /app/
          ignore:
            - .*
            - tmp/
    environment:
      PORT: 8080
      LOG__LEVEL: DEBUG
      LOG__PRETTY: false
    networks:
      - bfo-network
    ports:
      - 8080:8080
    depends_on:
      fluentd:
        condition: service_healthy
      localstack:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: "true"
        tag: api

  localstack:
    image: localstack/localstack:latest
    restart: unless-stopped
    environment:
      SERVICES: sqs
      DEBUG: 1
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bfo-network
    ports:
      - 4566:4566
    depends_on:
      fluentd:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: "true"
        tag: localstack

  prometheus:
    image: prom/prometheus:latest
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
    networks:
      - bfo-network
    ports:
      - 9090:9090

  fluentd:
    build:
      context: ./resources/fluentd/
    environment:
      FLUENTD_CONF: "fluent.conf"
    configs:
      - source: fluentd-config
        target: /fluentd/etc/fluent.conf
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "24224"]
      interval: 10s
      retries: 5
      timeout: 5s
    volumes:
      # - host_logs:/var/log
      # Needed for journald log ingestion:
      - /etc/machine-id:/etc/machine-id
      - /dev/log:/dev/log
      - /var/run/systemd/journal/:/var/run/systemd/journal/
    networks:
      - bfo-network
    ports:
      - 24224:24224
      - 24224:24224/udp
    depends_on:
      loki:
        condition: service_started
    logging:
      options:
        tag: infra.monitoring

  loki:
    image: grafana/loki:main
    user: "0"
    configs:
      - source: loki-config
        target: /etc/loki/local_config.yaml
    volumes:
      - loki-data:/var/loki
    command: -config.file=/etc/loki/local_config.yaml
    networks:
      - bfo-network
    ports:
      - 3100:3100

  grafana:
    image: grafana/grafana:main
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    volumes:
      # - grafana-data:/var/lib/grafana
      - ./resources/grafana/provisioning:/etc/grafana/provisioning
      - ./resources/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - bfo-network
    ports:
      - 3000:3000

configs:
  prometheus-config:
    file: ./resources/prometheus/prometheus.yml
  fluentd-config:
    file: ./resources/fluentd/fluentd.conf
  loki-config:
    file: ./resources/loki/local_config.yaml

volumes:
  # grafana-data:
  loki-data:

networks:
  bfo-network:
    driver: bridge
