// Code generated by mockery v2.53.3. DO NOT EDIT.

package batching

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Batcher type
type MockClient struct {
	mock.Mock
}

// CancelBatch provides a mock function with given fields: ctx, batchID
func (_m *MockClient) CancelBatch(ctx context.Context, batchID string) (*Batch, error) {
	ret := _m.Called(ctx, batchID)

	if len(ret) == 0 {
		panic("no return value specified for CancelBatch")
	}

	var r0 *Batch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Batch, error)); ok {
		return rf(ctx, batchID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Batch); ok {
		r0 = rf(ctx, batchID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Batch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, batchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBatch provides a mock function with given fields: ctx, batchReq
func (_m *MockClient) CreateBatch(ctx context.Context, batchReq CreateBatchRequest) (*Batch, error) {
	ret := _m.Called(ctx, batchReq)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 *Batch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateBatchRequest) (*Batch, error)); ok {
		return rf(ctx, batchReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateBatchRequest) *Batch); ok {
		r0 = rf(ctx, batchReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Batch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateBatchRequest) error); ok {
		r1 = rf(ctx, batchReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFile provides a mock function with given fields: ctx, filePath, purpose
func (_m *MockClient) CreateFile(ctx context.Context, filePath string, purpose string) (*File, error) {
	ret := _m.Called(ctx, filePath, purpose)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 *File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*File, error)); ok {
		return rf(ctx, filePath, purpose)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *File); ok {
		r0 = rf(ctx, filePath, purpose)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, filePath, purpose)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBatches provides a mock function with given fields: ctx, params
func (_m *MockClient) ListBatches(ctx context.Context, params *ListBatchesParams) (*ListBatchesResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListBatches")
	}

	var r0 *ListBatchesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListBatchesParams) (*ListBatchesResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListBatchesParams) *ListBatchesResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListBatchesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListBatchesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveBatch provides a mock function with given fields: ctx, batchID
func (_m *MockClient) RetrieveBatch(ctx context.Context, batchID string) (*Batch, error) {
	ret := _m.Called(ctx, batchID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveBatch")
	}

	var r0 *Batch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Batch, error)); ok {
		return rf(ctx, batchID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Batch); ok {
		r0 = rf(ctx, batchID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Batch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, batchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
